1. 什么是webpack
  webpack 是一个现代 JavaScript 应用程序的静态模块打包器

2. 入口 entry
  入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始
  可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为 ./src。
  module.exports = {
    entry: {
      main: './path/to/my/entry/file.js'
    }
    简单写法
    entry: './path/to/my/entry/file.js'
  };

3. 出口 output
  output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist
  注意，即使可以存在多个入口起点，但只指定一个输出配置。
  module.exports = {
    entry: './path/to/my/entry/file.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'my-first-webpack.bundle.js'
    }

    //如果配置创建了多个单独的入口，则应该使用占位符来确保每个文件具有唯一的名称
    entry: {
      app: './src/app.js',
      search: './src/search.js'
    },
    output: {
      filename: '[name].js',
      path: __dirname + '/dist'
    }
  };

4. 模式 mode
  通过选择 development 或 production 之中的一个，来设置 mode 参数，进行对 webpack 内置的优化
  module.exports = {
    mode: 'production'
  };

5. 加载器 loader
  loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。
  使用前需要下载好对应的loader，然后进行相关的配置
  在更高层面，在 webpack 的配置中 loader 有两个目标：
    test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。
    use 属性，表示进行转换时，应该使用哪个 loader。

  const config = {
    output: {
      filename: 'my-first-webpack.bundle.js'
    },
    module: {
      rules: [
        { test: /\.txt$/, use: 'raw-loader' }
      ]
    }
  };

6. 插件 plugins
  插件目的在于解决 loader 无法实现的其他事。
  由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。
    const HtmlWebpackPlugin = require('html-webpack-plugin'); //通过 npm 安装
    const webpack = require('webpack'); //访问内置的插件
    const path = require('path');

    const config = {
      entry: './path/to/my/entry/file.js',
      output: {
        filename: 'my-first-webpack.bundle.js',
        path: path.resolve(__dirname, 'dist')
      },
      module: {
        rules: [
          {
            test: /\.(js|jsx)$/,
            use: 'babel-loader'
          }
        ]
      },
      plugins: [
        new webpack.optimize.UglifyJsPlugin(),
        new HtmlWebpackPlugin({template: './src/index.html'})
      ]
    };

7. 命名
  webpack.config.js 这个文件是webpack的配置文件，名字唯一。默认读取，名字要换需要指定 webpack --config=config/webpack.dev.js

8. 创建本地服务器
  第一步： 安装 npm install -g webpack-dev-server     npm install --save-dev webpack-dev-server
  第二步： 配置npm命令 "server": "webpack-dev-server --open" 使用npm run server来开启
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转  它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html
    port   设置默认监听端口，如果省略，默认为”8080“
    inline: true//实时刷新，
    open: true   自动打开浏览器,
    overlay: true   错误在页面也出现,不仅仅是控制台
  }

9.插件
  extract-text-webpack-plugin 它的作用是打包后将生成css文件通过link的方式引入到html中，如果不使用这个插件，那么css就打包到<head>的style中。
  optimize-css-assets-webpack-plugin 压缩css
  uglifyjs-webpack-plugin 压缩js